IncomingMessage: {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0
    },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: false,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null
  },
  readable: false,
  domain: null,
  _events: { end: [Function: resetHeadersTimeoutOnReqEnd
    ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        owner: [Circular
      ],
        onread: [Function: onread
      ],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true
    },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object
      ],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
    },
     readable: true,
     domain: null,
     _events: { end: [Array
      ],
        _socketEnd: [Function: onSocketEnd
      ],
        drain: [Array
      ],
        timeout: [Function: socketOnTimeout
      ],
        data: [Function: bound socketOnData
      ],
        error: [Function: socketOnError
      ],
        close: [Array
      ],
        resume: [Function: onSocketResume
      ],
        pause: [Function: onSocketPause
      ]
    },
     _eventsCount: 9,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
      ],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
      ]
    },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 8080',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 31
    },
     _server:
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 8080',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 31
    },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idlePrev:
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idleStart: 14229,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders
      ],
        '1': [Function: parserOnHeadersComplete
      ],
        '2': [Function: parserOnBody
      ],
        '3': [Function: parserOnMessageComplete
      ],
        '4': [Function: bound onParserExecute
      ],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular
      ],
        incoming: [Circular
      ],
        outgoing: null,
        parsingHeadersStart: 1583621839947,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming
      ],
      [Symbol(isReused)
      ]: false
    },
     on: [Function: socketOnWrap
    ],
     _paused: false,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
      ],
        connection: [Circular
      ],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData
      ],
        _sent100: false,
        _expect_continue: false,
        req: [Circular
      ],
        locals: {},
      [Symbol(outHeadersKey)
      ]: [Object
      ]
    },
    [Symbol(asyncId)
    ]: 42,
    [Symbol(bytesRead)
    ]: 0,
    [Symbol(asyncId)
    ]: 44,
    [Symbol(triggerAsyncId)
    ]: 42
  },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        owner: [Circular
      ],
        onread: [Function: onread
      ],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true
    },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object
      ],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
    },
     readable: true,
     domain: null,
     _events: { end: [Array
      ],
        _socketEnd: [Function: onSocketEnd
      ],
        drain: [Array
      ],
        timeout: [Function: socketOnTimeout
      ],
        data: [Function: bound socketOnData
      ],
        error: [Function: socketOnError
      ],
        close: [Array
      ],
        resume: [Function: onSocketResume
      ],
        pause: [Function: onSocketPause
      ]
    },
     _eventsCount: 9,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
      ],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
      ]
    },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 8080',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 31
    },
     _server:
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 8080',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 31
    },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idlePrev:
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idleStart: 14229,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders
      ],
        '1': [Function: parserOnHeadersComplete
      ],
        '2': [Function: parserOnBody
      ],
        '3': [Function: parserOnMessageComplete
      ],
        '4': [Function: bound onParserExecute
      ],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular
      ],
        incoming: [Circular
      ],
        outgoing: null,
        parsingHeadersStart: 1583621839947,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming
      ],
      [Symbol(isReused)
      ]: false
    },
     on: [Function: socketOnWrap
    ],
     _paused: false,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
      ],
        connection: [Circular
      ],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData
      ],
        _sent100: false,
        _expect_continue: false,
        req: [Circular
      ],
        locals: {},
      [Symbol(outHeadersKey)
      ]: [Object
      ]
    },
    [Symbol(asyncId)
    ]: 42,
    [Symbol(bytesRead)
    ]: 0,
    [Symbol(asyncId)
    ]: 44,
    [Symbol(triggerAsyncId)
    ]: 42
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers: { host: 'localhost: 8080',
     'user-agent': 'insomnia/7.1.1',
     'content-type': 'application/json',
     accept: '* /*',
     'content-length': '5' },
  rawHeaders:
   [ 'Host',
     'localhost:8080',
     'User-Agent',
     'insomnia/7.1.1',
     'Content-Type',
     'application/json',
     'Accept',
     '*/*',
     'Content-Length',
     '5'
  ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/5e63feb1fbe05512cc5090b2',
  method: 'PUT',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        owner: [Circular
      ],
        onread: [Function: onread
      ],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true
    },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object
      ],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
    },
     readable: true,
     domain: null,
     _events: { end: [Array
      ],
        _socketEnd: [Function: onSocketEnd
      ],
        drain: [Array
      ],
        timeout: [Function: socketOnTimeout
      ],
        data: [Function: bound socketOnData
      ],
        error: [Function: socketOnError
      ],
        close: [Array
      ],
        resume: [Function: onSocketResume
      ],
        pause: [Function: onSocketPause
      ]
    },
     _eventsCount: 9,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
      ],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
      ]
    },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 8080',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 31
    },
     _server:
      Server {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object
      ],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 8080',
      [Symbol(IncomingMessage)
      ]: [Object
      ],
      [Symbol(ServerResponse)
      ]: [Object
      ],
      [Symbol(asyncId)
      ]: 31
    },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idlePrev:
      TimersList {
        _idleNext: [Circular
      ],
        _idlePrev: [Circular
      ],
        _timer: [Object
      ],
        _unrefed: true,
        msecs: 120000,
        nextTick: false
    },
     _idleStart: 14229,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders
      ],
        '1': [Function: parserOnHeadersComplete
      ],
        '2': [Function: parserOnBody
      ],
        '3': [Function: parserOnMessageComplete
      ],
        '4': [Function: bound onParserExecute
      ],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular
      ],
        incoming: [Circular
      ],
        outgoing: null,
        parsingHeadersStart: 1583621839947,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming
      ],
      [Symbol(isReused)
      ]: false
    },
     on: [Function: socketOnWrap
    ],
     _paused: false,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object
      ],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
      ],
        connection: [Circular
      ],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData
      ],
        _sent100: false,
        _expect_continue: false,
        req: [Circular
      ],
        locals: {},
      [Symbol(outHeadersKey)
      ]: [Object
      ]
    },
    [Symbol(asyncId)
    ]: 42,
    [Symbol(bytesRead)
    ]: 0,
    [Symbol(asyncId)
    ]: 44,
    [Symbol(triggerAsyncId)
    ]: 42
  },
  _consuming: true,
  _dumped: false,
  next: [Function: next
  ],
  baseUrl: '/expense',
  originalUrl: '/expense/5e63feb1fbe05512cc5090b2',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/5e63feb1fbe05512cc5090b2',
     path: '/5e63feb1fbe05512cc5090b2',
     href: '/5e63feb1fbe05512cc5090b2',
     _raw: '/5e63feb1fbe05512cc5090b2'
  },
  params: { _id: '5e63feb1fbe05512cc5090b2'
  },
  query: {},
  res:
   ServerResponse {
     domain: null,
     _events: { finish: [Function: bound resOnFinish
      ]
    },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object
      ],
        _parent: null,
        _host: null,
        _readableState: [Object
      ],
        readable: true,
        domain: null,
        _events: [Object
      ],
        _eventsCount: 9,
        _maxListeners: undefined,
        _writableState: [Object
      ],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object
      ],
        _server: [Object
      ],
        _idleTimeout: 120000,
        _idleNext: [Object
      ],
        _idlePrev: [Object
      ],
        _idleStart: 14229,
        _destroyed: false,
        parser: [Object
      ],
        on: [Function: socketOnWrap
      ],
        _paused: false,
        _httpMessage: [Circular
      ],
      [Symbol(asyncId)
      ]: 42,
      [Symbol(bytesRead)
      ]: 0,
      [Symbol(asyncId)
      ]: 44,
      [Symbol(triggerAsyncId)
      ]: 42
    },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object
      ],
        _parent: null,
        _host: null,
        _readableState: [Object
      ],
        readable: true,
        domain: null,
        _events: [Object
      ],
        _eventsCount: 9,
        _maxListeners: undefined,
        _writableState: [Object
      ],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object
      ],
        _server: [Object
      ],
        _idleTimeout: 120000,
        _idleNext: [Object
      ],
        _idlePrev: [Object
      ],
        _idleStart: 14229,
        _destroyed: false,
        parser: [Object
      ],
        on: [Function: socketOnWrap
      ],
        _paused: false,
        _httpMessage: [Circular
      ],
      [Symbol(asyncId)
      ]: 42,
      [Symbol(bytesRead)
      ]: 0,
      [Symbol(asyncId)
      ]: 44,
      [Symbol(triggerAsyncId)
      ]: 42
    },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData
    ],
     _sent100: false,
     _expect_continue: false,
     req: [Circular
    ],
     locals: {},
    [Symbol(outHeadersKey)
    ]: { 'x-powered-by': [Array
      ]
    }
  },
  body: {},
  _body: true,
  length: undefined,
  read: [Function
  ],
  route:
   Route {
     path: '/:_id',
     stack: [
      [Object
      ],
      [Object
      ],
      [Object
      ]
    ],
     methods: { get: true, put: true, delete: true
    }
  }
}